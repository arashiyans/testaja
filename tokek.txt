classes:
  - nsidc_jenkins
  - nsidc_nfs
  - nsidc_miniconda

nsidc_miniconda::install:
  /opt/miniconda:
    owner: jenkins
    group: jenkins
    build: true
    config:
      location: /var/lib/jenkins
      channels:
        extra:
          - osgeo
    packages:
      - 'fabric>=1.10*'
      - 'bumpversion==0.5.1'

nsidc_nfs::sharemounts:
  /share/sw/packages:
    project: sw
    share: packages

nsidc_jenkins::plugins:
  git: {}
  git-client: {}
  git-parameter: {}
  scm-api: {}
  credentials: {}
  ssh-credentials: {}
  greenballs: {}
  jobConfigHistory: {}
  mailer: {}
  instant-messaging: {}
  jabber: {}
  ansicolor: {}
  simple-theme-plugin: {}
  slack: {}

nsidc_jenkins::slack:
  token: 'FIxCytYP2DaY8jhBgY8UPn1r'
  room: '#bedigibs'
  notifications:
    aborted: true
    failure: true
    not_built: true
    unstable: true
    repeated_failure: true

nsidc_jenkins::jobs:

  # ==============================================================
  # CI Jobs (Test and Build a Snapshot)

  "%{hiera('project')}_1_CI_1_Checkout":
    git:
      repo: "%{hiera('gitrepo')}"
      poll_scm: true
    parameters:
      - type: string
        name: ref
        description: git ref (branch, tag, commit SHA) to checkout
        default: "%{hiera('branch')}"
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/ci
    description: clone the project
    command: git checkout $ref
    trigger_job: "%{hiera('project')}_1_CI_2_Build_Snapshot"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_1_CI_2_Build_Snapshot":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/ci/source
    description: build a snapshot package on the ci vm
    command: |
      . /etc/profile.d/miniconda.sh
      fab version.bump:version_part=build
      fab build:${WORKSPACE}/recipe
    trigger_job: "%{hiera('project')}_1_CI_3_Deploy_Snapshot"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_1_CI_3_Deploy_Snapshot":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/ci/source
    description: deploy the snapshot package on the ci vm
    parameters:
      - type: string
        name: pkgrepo
        description: nsidc_local or binstar (set in vagrant-nsidc.yaml)
        default: "%{hiera('pkgrepo')}"
    command: |
      . /etc/profile.d/miniconda.sh
      fab deploy.$pkgrepo:dev
    trigger_job: "%{hiera('project')}_2_QA_1_Checkout"
    trigger_threshold: SUCCESS

  # ==============================================================
  # QA Jobs

  "%{hiera('project')}_2_QA_1_Checkout":
    git:
      repo: "%{hiera('gitrepo')}"
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/qa
    description: clone the project into the QA workspace
    parameters:
      - type: string
        name: ref
        description: git ref (branch, tag, commit SHA) to checkout
        default: master
    command: git checkout $ref
    trigger_job: "%{hiera('project')}_2_QA_2_Provision_QA"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_2_QA_2_Provision_QA":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/qa
    description: install the snapshot to QA (puppet provision)
    command: |
      rm -rf .vagrant-qa;
      (vagrant nsidc hijack --env=qa || true)
      vagrant nsidc up --env=qa --provision;
    trigger_job: "%{hiera('project')}_2_QA_3_Run_Commands"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_2_QA_3_Run_Commands":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/qa
    description: run tasks on the qa machine (e.g. generate data)
    command: |
      vagrant nsidc ssh --env=qa -c "fab -f /vagrant/source/fabfile/ run"

  # ==============================================================
  # Release Jobs (create and build a release)

  "%{hiera('project')}_3_RELEASE_1_Create_Release":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/release
    git:
      repo: "%{hiera('gitrepo')}"
    parameters:
      - type: string
        name: ref
        description: git ref (branch, tag, commit SHA) to checkout
        default: master
      - type: choice
        name: version_part
        description: The part of the version to increase, according to SemVer.
        choices:
          - none
          - minor
          - major
    command: |
      . /etc/profile.d/miniconda.sh
      git checkout $ref
      cd ${WORKSPACE}/source
      fab version.bump:version_part=$version_part
      fab version.bump:version_part=release
    trigger_job: "%{hiera('project')}_3_RELEASE_2_Build_Release"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_3_RELEASE_2_Build_Release":
    git:
      repo: "%{hiera('gitrepo')}"
    parameters:
      - type: string
        name: ref
        description: git ref (branch, tag, commit SHA) to checkout
        default: master
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/release
    description: re-checkout and build a new release package
    command: |
      . /etc/profile.d/miniconda.sh
      git checkout $ref
      cd ${WORKSPACE}/source
      fab build:${WORKSPACE}/source/recipe
    trigger_job: "%{hiera('project')}_3_RELEASE_3_Deploy_Release"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_3_RELEASE_3_Deploy_Release":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/release/source
    description: deploy the release package
    parameters:
      - type: string
        name: pkgrepo
        description: nsidc_local or binstar (set in vagrant-nsidc.yaml)
        default: "%{hiera('pkgrepo')}"
    command: |
      . /etc/profile.d/miniconda.sh
      fab deploy.$pkgrepo:main
    trigger_job: "%{hiera('project')}_3_RELEASE_4_New_Snapshot"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_3_RELEASE_4_New_Snapshot":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/release/source
    description: bump version to next snapshot
    command: |
      . /etc/profile.d/miniconda.sh
      fab version.bump:version_part=patch

  # ==============================================================
  # Staging/Blue Jobs (Production deployment)
  "%{hiera('project')}_4_PRODUCTION_1_Checkout":
    git:
      repo: "%{hiera('gitrepo')}"
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/production
    description: clone the project into the production workspace
    parameters:
      - type: string
        name: ref
        description: tag to deploy to production (you should not deploy master to production)
        default: v0.0.0
    command: git checkout $ref
    trigger_job: "%{hiera('project')}_4_PRODUCTION_2_Provision_Staging"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_4_PRODUCTION_2_Provision_Staging":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/production
    description: provision staging
    command: |
      rm -rf .vagrant-staging;
      (vagrant nsidc hijack --env=staging || true)
      (vagrant nsidc destroy --env=staging || true)
      vagrant nsidc up --env=staging;
    trigger_job: "%{hiera('project')}_4_PRODUCTION_3_Run_Commands"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_4_PRODUCTION_3_Run_Commands":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/production
    description: run tasks on the staging machine (e.g. generate data)
    command: |
      vagrant nsidc ssh --env=staging -c "fab -f /vagrant/source/fabfile/ run"
    trigger_job: "%{hiera('project')}_4_PRODUCTION_4_Provision_Blue"
    trigger_threshold: SUCCESS

  "%{hiera('project')}_4_PRODUCTION_4_Provision_Blue":
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/production
    description: provision blue
    command: |
      rm -rf .vagrant-blue;
      (vagrant nsidc hijack --env=blue || true)
      (vagrant nsidc destroy --env=blue || true)
      vagrant nsidc up --env=blue;

  # ==============================================================
  # Cleanup Jobs

  "%{hiera('project')}_5_CLEANUP_Destroy_VMs":
    git:
      repo: "%{hiera('gitrepo')}"
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}/cleanup
    description: cleanup project (destroy all the machines)
    command: |

      # note that all commands (even if they fail) will eval to true
      #
      # this allows ALL environments to be cleaned up if one doesnt
      # exist
      #
      # you should monitor the output of this job for real errors

      # cleanup, hijack, destroy, up
      (rm -rf .vagrant-build || true)
      (vagrant nsidc hijack --env=build || true)
      (vagrant nsidc destroy --env=build || true)

      # cleanup, hijack, destroy, up
      (rm -rf .vagrant-integration || true)
      (vagrant nsidc hijack --env=integration || true)
      (vagrant nsidc destroy --env=integration || true)

      # cleanup, hijack, destroy, up
      (rm -rf .vagrant-qa || true)
      (vagrant nsidc hijack --env=qa || true)
      (vagrant nsidc destroy --env=qa || true)

      # cleanup, hijack, destroy, up
      (rm -rf .vagrant-staging || true)
      (vagrant nsidc hijack --env=staging || true)
      (vagrant nsidc destroy --env=staging || true)

      # cleanup, hijack, destroy, up
      (rm -rf .vagrant-blue || true)
      (vagrant nsidc hijack --env=blue || true)
      (vagrant nsidc destroy --env=blue || true)

      # notify the user to do the following on completion
      echo 'when this job completes you will need to manually destroy ci'
      echo 'from your local machine (in the project source directory'
      echo '  >>  rm -rf .vagrant-ci'
      echo '  >>  vagrant nsidc hijack --env=ci'
      echo '  >>  vagrant nsidc destroy --env=ci'